function [y1] = nearst_nn(x1)
%NEARST_NN neural network simulation function.
%
% Auto-generated by MATLAB, 08-Apr-2022 10:49:15.
% 
% [y1] = nearst_nn(x1) takes these arguments:
%   x = 8xQ matrix, input #1
% and returns:
%   y = 3xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.927128610840151;-0.831770648815317;-0.811804716490007;-0.829251055822419;-0.833290318050068;-1.41985170038255;-1.42860886385838;-1.26304131792606];
x1_step1.gain = [0.599938005445654;0.948204079493792;0.855387699085792;0.928835747120252;0.990720425539053;0.819481578263446;0.532675830038041;0.540473085735368];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.5590973694116334602;-0.24510072029268856197;-0.60894791008832183099;0.078315793703760877564;0.06669625364587881966;-0.57923013384753729849;-1.8175971699923851865];
IW1_1 = [-0.005365284993049833015 -0.34171040638797911537 -1.2517381565562692991 0.71814896157021146372 -0.80072369568113410665 -0.25572465027672319771 -0.030157632186149193471 -1.2421139553108275777;-0.015108999528425199124 -0.54420375207576754395 1.2766238616752039192 0.045739515766495437987 0.89895178395783970071 0.37850887803593041836 2.7526165956349415431 -2.1394947956419074764;-0.89447531681211600585 0.83362834693261711472 -0.58972643105040978284 0.39604508060439025385 -0.42304551315137567391 0.94995452448951378521 0.07373932122438604797 0.92969489515708825245;-0.67778840744483404013 -0.05551368432680631182 0.08926240791641798511 0.95767360783986166251 -0.07616556386435673065 -1.0993942127105738038 1.6984627090926753823 -0.87121119548380621112;-1.2851613476955201509 1.2958851908059840774 -1.6064644208501415168 0.67271641101312651401 1.2765036519843069307 0.47801013914490242396 2.6669156429794287355 0.30119966838433376299;-1.466363671894020948 -0.0041318033159242137375 -1.3583267002528962575 -1.0142416896701045292 0.38025464981450579627 1.2180449735461027494 -0.26885026452747501358 -0.81608861874347216059;-0.57462526245836231809 0.45935746191271092931 0.28726012416077573164 -1.2669109740952242404 0.2310446601123404553 0.68776156784671438338 -1.7642829838044253865 -0.0067834854182931142441];

% Layer 2
b2 = [-0.49586329409843282745;-0.93702670930601406063;0.10988354281990790617];
LW2_1 = [1.0253788859567793956 0.43054250736178178993 -0.44182230939628541755 -1.3305024769934199469 1.0889464339159928841 -1.039242619655123212 0.79275196827655070031;0.34264120198199665701 -0.34794145228463496666 -0.61932068612068857938 -0.19626105736107560262 0.15087720387797573518 -0.43673113275412900336 -0.27495022647903122337;-1.0106544882567456423 -0.70614656098965067343 -0.71226991864918065556 0.50784126229910209194 0.45392507350025029789 0.52473597686718109756 0.17203205292836348805];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.532994903371539;0.552190109423405;0.492610736458373];
y1_step1.xoffset = [-1.69077937357999;-1.17585804047571;-1.15070948163547];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
