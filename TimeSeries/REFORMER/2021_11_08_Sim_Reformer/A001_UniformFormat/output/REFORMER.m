function [Y,Xf,Af] = REFORMER(X,~,~)
%REFORMER neural network simulation function.
%
% Auto-generated by MATLAB, 10-Jan-2022 17:33:14.
% 
% [Y] = REFORMER(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 6xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.7208886344043;-1.74612024559196;-1.70833230753896];
x1_step1.gain = [0.576553850262479;0.577464051740462;0.584187940642937];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.2407545666052754996;1.4875932341763424827;0.13946130041133256161;0.075302946938852408088;-0.16978431562890061723;0.23263450434110902187;-1.0850918953531396571;0.86896024984328834595;-1.9819652535390261949;-1.4634481661946365794];
IW1_1 = [0.59284375503094555171 1.1805588085521656616 0.94935097561377157493;-0.2470838735613854753 -0.053949336476399233076 0.66991466442001446069;0.3419220994812944836 0.11709407962097587164 0.0076652659218560785515;-0.28072059207000099601 -0.1889167522833150592 -0.85952990357967762325;-1.9133618308629924964 -0.73253144240328782466 -0.92501093300560222055;0.27571948825156755714 0.019815584912249852717 0.011527152307094246445;-1.2076580533115899296 -0.68868664661519785053 -1.5485596762441380392;0.21456339879355848521 0.0055156888878341355648 -1.1281494625409502763;-1.1197359403958633273 -0.49812594221911554726 0.15641850563761389159;-0.92871631457651548924 -0.19311470660881630002 0.29557413240960955791];

% Layer 2
b2 = [-7.9426122934031777589;-0.50052858870173788652;3.136694788741694051;-5.9874367564203012648;-5.0531232311593345941;1.2670061322798955583;-3.0926586508151663324;0.62784311398717573827;1.2033865305669371182;0.95931127354288825426];
LW2_1 = [-0.16610007201919652076 5.7699593052807447435 -1.9895496878943350616 1.0595617668151393609 -0.008764013529940597666 2.6506792917704005141 -0.42355325924324654929 -0.24853540959028017077 -2.0338747724712615828 1.4402800057186604388;0.91570662629773014185 0.16996082996545325283 1.3630420887635594784 0.11084052394998775148 -0.099498892842365710409 -0.45546433032841515676 -0.066117696886213897511 0.097468044029665718009 -0.88258307175573491588 0.48102810342576513003;0.39742831373301668041 -0.50040131778437468846 1.6086388214960054555 -2.7209861561845798406 -0.46480023174214185611 -3.592220433359965881 0.48436359618903918056 0.92529711239967205039 -2.2280925951952434971 2.1545146629390559134;1.2279503783406360284 1.728472241357612571 -0.76470897513416813407 5.3622143120182794718 1.8941839029011637852 1.3875739376542468584 -0.24956624836618265806 -4.7607067414719255183 -2.3060056481833002273 -1.6215834097036769812;1.0101213944708073988 0.79300545758041096622 -1.8590708673555096375 4.239648452570520476 1.6110052706905666486 1.4109063886321639991 -0.057914954983591455939 -3.8741134863396298194 -2.3594957753099166098 -1.6570571480260254393;0.88857868113780780206 0.27495706515100259981 0.10746763730961082783 0.097928239644222411786 0.16210959410246106316 -1.2291320399629812599 -0.31617494519625394256 0.056231830660349133022 0.27940529764829730164 0.96678892750232914288;-2.2192861839363815513 -7.5928785147445214676 0.54461434839456757118 -12.036175285415721348 -0.93990827006435884172 4.7019031017040724407 -0.33931137891860868594 8.2400400321374647206 -13.600690559025306214 4.095979963605515195;0.51658994204790520399 0.027736545288354719913 2.1131947692360575353 -0.025184889175908217046 -0.010976304352006950593 -2.6880218141092599993 -0.052790524245565073613 0.011396586937031258358 -0.55627948556185091711 0.11607398304378273302;-1.5889904815959083884 -0.12851364313528554351 -2.174682395801796897 -0.094090251624573240097 0.15891418423460673681 2.3519626872119605565 -0.26805050496319271502 -0.098260165246869063393 0.65788872179646573635 -0.20861620875533520847;-1.221108863539823508 0.12525805045886448386 1.0972475235589993492 0.20588337132920295214 0.1561392486786118694 -0.55267205555654885796 0.13393981394776172111 -0.16995680343259128575 0.8781263426393463023 0.18232622462234243654];

% Layer 3
b3 = [5.623058570862317751;-0.19368426098667512747;-3.459403828895706301;-5.8967458145721654006;8.7523698042369506567;-5.6146541229237882931];
LW3_2 = [0.37777967763308351046 -2.1887541263094858479 -2.7351731921084936339 1.2960494335881467265 -1.3372687830721747826 -4.347140249232661624 0.07999849017504097326 0.13642992542986817628 -1.0255635644525336048 -2.1606999315811123985;4.13375178818232758 0.9422401338758591427 0.32121789551164686705 -3.9524732602812160387 3.9168788627844519645 0.58688463701526516481 -0.23722105772737117624 1.4413096332978436731 1.9999836490135178835 -2.6020758148659637321;-1.9672322736352731987 6.5129609645248862648 6.9101745877481670632 -1.3027099299160977974 1.4126501000194089386 2.4643138245537716813 -0.044416917069405537077 -12.660691000120314342 1.9893828861239701844 0.65322264337335733675;-8.4762168017168058043 9.5692131054393101408 -3.0663669068676027152 1.9051793363160942629 -1.7364336032964178269 3.6524270764256816513 0.12431727953265071795 -4.9250482421823429391 0.9265215316958528291 5.7915309560748129414;-0.13090477345753978589 -0.80413309954225720144 -10.174967771358685908 -0.050633139536728585806 0.013482597958360096821 -0.22901200643704822113 -0.043163947671135231843 0.33115230044183696645 -0.10344577763901810497 -0.91853508636818970157;1.1916669640976278455 -3.5004686949867123147 -2.9788027746248832983 0.24709246320458702617 -0.30700554522754436304 0.54373137888134870366 -0.0054438949343244497428 14.916298747896808763 -0.98262894490214536258 1.6453435349907765683];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.448719443749623;0.427583426200455;0.373642290461889;0.507270831679065;0.282232795428322;0.461659823562564];
y1_step1.xoffset = [-1.7795027382141;-1.6950468857749;-2.30356380071742;-2.13957869504198;-0.695596574172173;-2.00876956064571];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
