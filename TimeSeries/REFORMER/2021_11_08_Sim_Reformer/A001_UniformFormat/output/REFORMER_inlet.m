function [Y,Xf,Af] = REFORMER_inlet(X,~,~)
%REFORMER_INLET neural network simulation function.
%
% Auto-generated by MATLAB, 10-Jan-2022 17:27:00.
% 
% [Y] = REFORMER_inlet(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 4xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.7208886344043;-1.74612024559196];
x1_step1.gain = [0.576553850262479;0.577464051740462];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.40457724485489093835;-2.1749196372302188607;-2.1708704577545607783;-0.40901676904190648054];
IW1_1 = [0.12457740858989313493 0.17312107674098212162;-0.44621423258402320711 -0.5623901242678022161;-0.51826371395945181053 -0.47038257292777579943;-0.16004556125755850515 -0.12796869208385550087];

% Layer 2
b2 = [-5.8197752313438897431;-3.9065279469370599585;6.5997297596778254913;-3.9065279469371110288];
LW2_1 = [-12.176560031310668109 14.885336429711054862 -20.201791668278641367 -13.715412448904276133;13.011677481935141287 -18.606759529161355005 14.885287351709758141 12.095469360557466132;-0.925192949865583536 3.1307704559330127303 3.4276759537581078519 0.85394749550896398294;13.011677481935372214 -18.606759529159862865 14.885287351708205605 12.09546936055770594];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.486323815011878;0.491678733185108;0.363805816690508;0.491678733185109];
y1_step1.xoffset = [-1.94694385534448;-2.00690957882227;-1.6274308084822;-2.00690957882227];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
