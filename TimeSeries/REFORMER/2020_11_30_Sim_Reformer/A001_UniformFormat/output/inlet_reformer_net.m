function [y1] = inlet_reformer_net(x1)
%INLET_REFORMER_NET neural network simulation function.
%
% Auto-generated by MATLAB, 25-Feb-2022 07:45:11.
% 
% [y1] = inlet_reformer_net(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 6xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0];
x1_step1.gain = [0.333339209769731;0.571608550105375];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.1620987853192181749;-0.66925664695240127955;-0.18976313734357574958;0.63392536248127018261;-3.0795690818050438509;-4.4019433051683440894];
IW1_1 = [-0.32666911251732339005 -0.92452255419382689539;0.16805116006072648438 -0.49605566185747390628;-0.40015142213995025244 -0.75723174574072338316;0.59446669258091067167 -0.18210062383817257614;-2.0453898698506107756 -0.51634741415645990514;-2.1068633734783346334 -1.7371575706105111259];

% Layer 2
b2 = [-2.0690087098053071557;-1.973746616348012628;0.6140193986715478669;-0.51248130225636534529;0.12877536929510141617;1.5925827399606731216];
IW2_1 = [-0.53394950262566198695 -0.95516380998858041451;-0.52735458523785616602 -0.78819859321028951094;0.022835276818118577929 0.77967075442300592947;0.71762526155879724499 2.3275428801163720038;0.31548552479571823071 -0.25450627476916953817;-0.10912783299229560086 -1.0807625150176982665];
LW2_1 = [-0.77530417141983243301 0.63811968033936239397 -0.99408409330798375159 1.3567571972030698646 -2.5441798366864643022 0.17930284309956751043;-0.67935835354067275471 0.77847879759429738922 -0.879078269565540249 1.4428048285007393225 -2.4652208737452530052 0.21871270609403004048;-0.4022745657573296163 0.18450996465208885366 -0.2336868928096265674 0.5226890398117759462 -0.1075950088435248253 0.48040028101114157222;1.6629555378433362733 0.57871412086325701996 1.6395086216746328489 -0.89362413331473855571 2.0419027557281284047 -2.1171813626057902624;-0.22618876322159339742 0.63067698225215640395 -0.12047292056815045447 0.47530524613079028207 -0.84187102555878257082 0.55429749918339710213;-0.68529291359828869989 -1.0902685649679892954 -0.45929243003405023638 -0.51324580551446619125 0.65749853386941681244 1.6349476231844595198];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [3.11196637948733;10.1575981263042;5876.17051606695;2.59635989806364;182.206837707503;2.62138901408491];
y1_step1.xoffset = [0;0;0;0;0;0.0810457077320995];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + IW2_1*xp1 + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
